#lang racket
(require racket/match)
(require racket/trace)
(require "queue.rkt")

(provide (all-defined-out))

(define ITEMS 5)

;; ATENȚIE: Pentru această etapă a temei este necesar să implementați
;;          întâi TDA-ul queue în fișierul queue.rkt.
;; Reveniți la sarcinile din acest fișier după ce ați implementat tipul 
;; queue și ați verificat implementarea folosind checker-ul.


; Structura counter nu se modifică.
; Ceea ce se modifică este implementarea câmpului queue:
; - în loc de listă, acesta va fi o coadă (o structură de tip queue)
; - acest lucru nu este vizibil în definiția structurii counter,
;   ci în implementarea operațiilor acestui tip de date (tipul counter)
(define-struct counter (index tt et queue) #:transparent)


; TODO
; Actualizați funcțiile de mai jos astfel încât ele să folosească
; o structură de tip queue pentru reprezentarea cozii de persoane.
; Elementele cozii continuă să fie perechi (nume . nr_produse).
; Este esențial să respectați "bariera de abstractizare", adică să
; operați cu coada doar folosind interfața acestui TDA:
; - empty-queue
; - queue-empty?
; - enqueue
; - dequeue
; - top
; Obs: Doar câteva funcții vor necesita actualizări.


;; === 6 ===

(define (empty-counter index)
  (make-counter index 0 0 empty-queue)
)


(define (update f counters index)
  (update-helper f counters index '())
)

(define (update-helper f counters index acc)
  (cond
    [(null? counters) (reverse acc)]
    [(equal? (counter-index (first counters)) index)
     (update-helper f
                    (rest counters)
                    index
                    (cons (f (first counters)) acc))]
    [else (update-helper f
                         (rest counters)
                         index
                         (cons (first counters) acc))])
)

(define tt+
  (λ (minutes)
    (λ (C)
      (struct-copy counter C
                   [tt (+ minutes (match C [(counter index tt et queue) tt]))])
    )
  )
)

(define et+
  (λ (minutes)
    (λ (C)
      (struct-copy counter C
                   [et (+ minutes (match C [(counter index tt et queue) et]))]
      )
    )
  )
)


;; === 7 ===

(define (add-to-counter name items)
  (λ (C)
    (struct-copy counter C
        [tt (+ items (match C ((counter index tt et queue) tt)))]
        ; Daca coada e goala, et se schimba, altfel nu
        [et (if (queue-empty? (counter-queue C)) (+ items (counter-et C))
                (counter-et C))
        ]
        [queue (enqueue (cons name items) (counter-queue C))]
    )
  )
)

(define (min-x counters type)
  (cond
    [(equal? type "tt")
      (cond
        [(null? (cdr counters)) (cons (counter-index (car counters)) (counter-tt (car counters)))]
        [(<= (counter-tt (car counters)) (cdr (min-x (cdr counters) "tt")))
            (cons (counter-index (car counters)) (counter-tt (car counters)))]
        [else (min-x (cdr counters) "tt")]
      )
    ]
    [(equal? type "et")
     (cond
        [(null? (cdr counters)) (cons (counter-index (car counters)) (counter-et (car counters)))]
        [(<= (counter-et (car counters)) (cdr (min-x (cdr counters) "et")))
            (cons (counter-index (car counters)) (counter-et (car counters)))]
        [else (min-x (cdr counters) "et")]
      )
    ]
  )
)
(define (min-tt counters)
  (min-x counters "tt")
)
(define (min-et counters)
  (min-x counters "et")
)


;; === 8 ===

(define (remove-first-from-counter C)
  (make-counter (counter-index C); ----------------------------- index
                (cond; ----------------------------------------- tt
                  [(queue-empty? (dequeue (counter-queue C))) 0]
                  ; Timp ramas dupa eliminarea primei persoane
                  [else (- (counter-tt C) (counter-et C))]
                )
                (cond; ----------------------------------------- et
                  [(queue-empty? (dequeue (counter-queue C))) 0]
                  ; Timpul urmatoarei persoana din coada
                  [else (cdr (top (dequeue (counter-queue C))))]
                )
                (dequeue (counter-queue C)); ------------------- queue
  )
)


; TODO
; Implementați o funcție care calculează starea unei case după un număr dat de minute.
; Funcția presupune, fără să verifice, că în acest timp nu a ieșit nimeni din coadă, 
; deci va avea efect doar asupra câmpurilor tt și et.
; (cu alte cuvinte, este responsabilitatea utilizatorului să nu apeleze această funcție
; cu minutes > timpul până la ieșirea primului client din coadă)
; Atenție: casele fără clienți nu trebuie să ajungă la timpi negativi!
(define (pass-time-through-counter minutes)
  (λ (C)
    (struct-copy counter C
                 [tt (cond
                       [(queue-empty? (counter-queue C)) 0]
                       [else (- (counter-tt C) minutes)]
                     )
                 ]
                 [et (cond
                       [(queue-empty? (counter-queue C)) 0]
                       [else (- (counter-et C) minutes)]
                     )
                 ]
                 [queue (cond
                          [(queue-empty? (counter-queue C)) (counter-queue C)]
                          [(<= minutes (cdr (top (counter-queue C)))) (dequeue (counter-queue C))]
                          [else (counter-queue C)]
                        )
                 ]
    )
  )
)
  

; TODO
; Implementați funcția care simulează fluxul clienților pe la case.
; ATENȚIE: Față de etapa 2, apar modificări în:
; - formatul listei de cereri (parametrul requests)
; - formatul rezultatului funcției (explicat mai jos)
; requests conține 4 tipuri de cereri (3 moștenite din etapa 2 plus una nouă):
;   - (<name> <n-items>) - persoana <name> trebuie așezată la coadă la o casă            (ca înainte)
;   - (delay <index> <minutes>) - casa <index> este întârziată cu <minutes> minute       (ca înainte)
;   - (ensure <average>) - cât timp tt-ul mediu al tuturor caselor este mai mare decât
;                          <average>, se adaugă case fără restricții (case slow)         (ca înainte)
;   - <x> - trec <x> minute de la ultima cerere, iar starea caselor se actualizează
;           corespunzător (cu efect asupra câmpurilor tt, et, queue)                     (   NOU!   )
; Obs: Au dispărut cererile de tip remove-first, pentru a lăsa loc unui mecanism mai 
; sofisticat de a scoate clienții din coadă (pe măsură ce trece timpul).
; Sistemul trebuie să proceseze cele 4 tipuri de cereri în ordine, astfel:
; - persoanele vor fi distribuite la casele cu tt minim (dintre casele la care au voie)  (ca înainte)
; - când o casă suferă o întârziere, tt-ul și et-ul ei cresc (chiar dacă nu are clienți) (ca înainte)
; - tt-ul mediu (ttmed) se calculează pentru toate casele (și cele fast, și cele slow), 
;   iar la nevoie veți adăuga case slow una câte una, până când ttmed <= <average>       (ca înainte)
; - când timpul prin sistem avansează cu <x> minute, tt-ul, et-ul și queue-ul tuturor 
;   caselor se actualizează pentru a reflecta trecerea timpului; dacă unul sau mai mulți 
;   clienți termină de stat la coadă, ieșirile lor sunt contorizate în ordine cronologică.
; Rezultatul funcției serve va fi o pereche cu punct între:
; - lista sortată cronologic a clienților care au părăsit supermarketul
;   - fiecare element din listă va avea forma (index_casă . nume)
;   - dacă mai mulți clienți ies simultan, sortați-i crescător după indexul casei
; - lista caselor în starea finală (ca rezultatul din etapele 1 și 2)
; Obs: Pentru a contoriza ieșirile din cozi, puteți să lucrați într-o funcție ajutătoare
; (cu un parametru în plus față de funcția serve), pe care serve doar o apelează.


(define (serve requests fast-counters slow-counters)
  (serve-helper requests fast-counters slow-counters '())
)


(define (serve-helper requests fast-counters slow-counters clients-that-left)
  (define all-counters
    (append fast-counters slow-counters))

  (define (update x)
    
    'x
  )

  ; Functia pentru adaugare la coada
  (define (add-person name n-items)
    (if (> n-items ITEMS)
        (serve-helper (cdr requests)
               fast-counters
               (update (add-to-counter name n-items)
                       slow-counters
                       (car (min-tt slow-counters)))
               clients-that-left
        )
        (if (< (car (min-tt (append fast-counters slow-counters))); -- minim dintre toate casele
               (counter-index (car slow-counters))); -- prima casa slow
            (serve-helper (cdr requests)
                   (update (add-to-counter name n-items)
                           fast-counters
                           (car (min-tt fast-counters)))
                   slow-counters
                   clients-that-left
            )
            (serve-helper (cdr requests)
                   fast-counters
                   (update (add-to-counter name n-items)
                           slow-counters
                           (car (min-tt slow-counters)))
                   clients-that-left
            )
        )
    )
  )

  ; Funcita pentru delay
  (define (add-delay index minutes)
    (if (< index (counter-index (car slow-counters))); -- daca e casa fast
        (serve-helper (cdr requests)
               (update (et+ minutes)
                       (update (tt+ minutes)
                               fast-counters
                               index)
                       index)
               slow-counters
        )
        (serve-helper (cdr requests); -------------------------- daca e casa slow
               fast-counters
               (update (et+ minutes)
                       (update (tt+ minutes)
                               slow-counters
                               index)
                       index)
               clients-that-left
        )
    )
  )

  ; Functia pentru ensure
  (define (ensure average)
    (define sum
      (apply + (map (λ(x) (counter-tt x)) all-counters)))

    (define num
      (length all-counters))
    
    (define ttmed
      (/ sum num))

    ; Va fi nevoie sa adaugam case pana cand num >= sum/average
    ; Stiind numarul actual al caselor, putem afla de cate case
    ; este exact nevoie (num - sum/average)

    (if (>= num (/ sum average))
        (serve-helper (cdr requests)
               fast-counters
               slow-counters
               clients-that-left)
        (serve-helper requests
               fast-counters
               (append slow-counters (list (empty-counter (+ (counter-index (car (reverse slow-counters))) 1))))
               ; Creaza un empty-counter pentru ultimul index + 1
               clients-that-left
        )
    )
  )
  
  ; Call-uri catre functii
  (if (null? requests)
      (clients-that-left (append fast-counters slow-counters))
      (match (car requests)
        [x (update x)]
        [(list 'ensure average) (ensure average)]
        [(list name n-items) (add-person name n-items)]
        [(list 'delay index minutes) (add-delay index minutes)]
      )
  )
)


;; ==== test ====

(define Q1 (make-queue '() '() 0 0))
(define Q2 (make-queue '(1 2) '(5 4 3) 2 3))
(define Q3 (make-queue '() '(3 2 1 0) 0 4))
(define Q4 (make-queue '(1) '() 1 0))

(define C1 (empty-counter 1))
(define C2 (empty-counter 2))
(define C3 (empty-counter 3))
(define C4 (empty-counter 4))
(define C5 (make-counter 5 12 8 (queue '((remus . 6) (vivi . 4)) '() 2 0)))




        
