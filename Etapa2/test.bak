#lang racket
(require racket/match)
(require racket/trace)

(provide (all-defined-out))

(define ITEMS 5)

(define-struct counter (index tt et queue) #:transparent)



;; === 1 ===

(define (empty-counter index)
  (make-counter index 0 0 '()))

;;TEST

(define C1 (empty-counter 1))
(define C2 (empty-counter 2))
(define C3 (empty-counter 3))
(define C4 (empty-counter 4))
(define C5 (make-counter 5 12 8 '((remus . 6) (vivi . 4))))

;; === 2 ===

(define (update f counters index)
  (update-helper f counters index '())
  )

(define (update-helper f counters index acc)
  (cond
    [(null? counters) (reverse acc)]
    [(equal? (counter-index (first counters)) index)
     (update-helper f
                    (rest counters)
                    index
                    (cons (f (first counters)) acc))]
    [else (update-helper f
                         (rest counters)
                         index
                         (cons (first counters) acc))])
  )

(define tt+
  (λ (minutes)
    (λ (C)
      (struct-copy counter C
                   [tt (+ minutes (match C [(counter index tt et queue) tt]))])
    )
  )
)

(define et+
  (λ (minutes)
    (λ (C)
      (struct-copy counter C
                   [et (+ minutes (match C [(counter index tt et queue) et]))]
      )
    )
  )
)

(define add-to-counter
  (λ (name n-items)
    (λ (C)
      (struct-copy counter C
        [tt (+ n-items (match C ((counter index tt et queue) tt)))]
        [et (+ n-items (match C ((counter index tt et queue) et)))]
        [queue (append (match C ((counter index tt et queue) queue))
                       (list(cons name n-items)))]
      )
    )
  )
)
; Exemplu: (update (add-to-counter 'a' 3) (list C1 C2 C3 C4 C5) 5)
; Se adauga (a . 3) la finalul cozii casei 5

; type - specifica tipul de minim dorit
(define (min-x counters type)
  (cond
    [(equal? type "tt")
      (cond
        [(null? (cdr counters)) (cons (counter-index (car counters)) (counter-tt (car counters)))]
        [(<= (counter-tt (car counters)) (cdr (min-x (cdr counters) "tt")))
            (cons (counter-index (car counters)) (counter-tt (car counters)))]
        [else (min-x (cdr counters) "tt")]
      )
    ]
    [(equal? type "et")
     (cond
        [(null? (cdr counters)) (cons (counter-index (car counters)) (counter-et (car counters)))]
        [(<= (counter-et (car counters)) (cdr (min-x (cdr counters) "et")))
            (cons (counter-index (car counters)) (counter-et (car counters)))]
        [else (min-x (cdr counters) "et")]
      )
    ]
  )
)

;; === 3 ===

(define (min-tt counters)
  (min-x counters "tt")
)

;; === 4 ===

(define (min-et counters)
  (min-x counters "et")
)

;; === 5 ===

(define (remove-first-from-counter C)
  (make-counter (counter-index C); ----------------------------- index
                (cond; ----------------------------------------- tt
                  [(equal? (cdr (counter-queue C)) '()) 0]
                  ; Timp ramas deoarece se elimina delay-urile
                  [else (- (counter-tt C) (counter-et C))]
                )
                (cond; ----------------------------------------- et
                  [(equal? (cdr (counter-queue C)) '()) 0]
                  ; Timpul urmatoarei persoana din coada
                  [else (cdr (car (cdr (counter-queue C))))]
                )
                (cdr (counter-queue C)); ----------------------- queue
  )
)

;; === 6 ===

(define (serve requests fast-counters slow-counters)
  (define (add-person name n-items)
    (if (>= n-items ITEMS)
        (serve (cdr requests)
               fast-counters
               (update (add-to-counter name n-items)
                       slow-counters
                       (car (min-tt slow-counters)))
        )
        (if (< (car (min-tt (append fast-counters slow-counters))); -- minim dintre toate casele
               (counter-index (car slow-counters))); -- prima casa slow
            (serve (cdr requests)
                   (update (add-to-counter name n-items)))
        )
    )
  )


    (update (add-to-counter name n-items)
            (append fast-counters slow-counters)
            (car (min-tt (append fast-counters slow-counters)))
    )

  
  (if (null? requests)
      (append fast-counters slow-counters)
      (match (car requests)
        [(list name n-items) (add-person name n-items)]
        [(list 'delay index minutes) 'functie-2]
        [(list 'remove-first) 'functie-3]
        [(list 'ensure average) 'functie-4])
  )
)





























